# This workflow will build a Java project with Gradle
# For more information see: https://help.github.com/actions/language-and-framework-guides/building-and-testing-java-with-gradle

name: Masterpiece WEB CI

on:
  push:
    branches:
      - develop/web
#  pull_request:
#    branches: [ master ]

jobs:
  frontend_build_job:
    name: vue build
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: Use Node.js
        uses: actions/setup-node@v1
        with:
          node-version: '12.16.1'
          registry-url: 'https://registry.npmjs.org'
      - name: Vue Project npm build
        run: |
          npm install
          npm run build:prod
        working-directory: ./movie-masterpiece-club-web/frontend

  backend_build_job:
    needs: frontend_build_job
    name: springBoot build
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: Set up JDK 1.8
        uses: actions/setup-java@v1
        with:
          java-version: 1.8
      - name: Restoring gradle wrapper
        run: gradle wrapper --gradle-version=6.3 --distribution-type=bin
      - name: Grant execute permission for gradlew
        run: chmod +x gradlew
      - name: SpringBoot build with gradle
        run: ./gradlew :movie-masterpiece-club-web:bootJar
      - name: Run `ls -al`
        run: |
          ls -al ./movie-masterpiece-club-web/build/libs/

  cd:
    needs: backend_build_job
    name: docker image build & push
    runs-on: ubuntu-latest
    steps:
      # https://github.com/marketplace/actions/build-and-push-docker-images
      - name: Build and push Docker images
        uses: docker/build-push-action@v1.1.0
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
          repository: pasudo123/movie-masterpiece-club-web  # {docker-hub ID}/{image-name}
          tags: latest                                      # {tag-name}
          tag_with_sha: true
          path: installation

########################################################################################################################
## unused.
########################################################################################################################
# https://github.com/marketplace/actions/scp-files
#      - name: Copy jar file via ssh password
#        uses: appleboy/scp-action@master
#        with:
#          host: ${{ secrets.HOST }}
#          port: ${{ secrets.PORT }}
#          username: ${{ secrets.USERNAME }}
#          password: ${{ secrets.PASSWORD }}
#          source: ./movie-masterpiece-club-web/build/libs/
#          target: /volume1/docker/deploy/www/masterpiece-web/
#          rm: true
#      - name: Copy Docker file via ssh password
#        uses: appleboy/scp-action@master
#        with:
#          host: ${{ secrets.HOST }}
#          port: ${{ secrets.PORT }}
#          username: ${{ secrets.USERNAME }}
#          password: ${{ secrets.PASSWORD }}
#          source: ./movie-masterpiece-club-web/installation/
#          target: /volume1/docker/deploy/www/masterpiece-web/
#          rm: false

#  ssh_deploy_job:
#    needs: backend_build_job
#    name: ssh deploy
#    runs-on: ubuntu-latest
#    steps:
#      - name: executing remote ssh commands using password
#        uses: appleboy/ssh-action@master
#        # https://help.github.com/en/actions/configuring-and-managing-workflows/creating-and-storing-encrypted-secrets
#        with:
#          host: ${{ secrets.HOST }}
#          username: ${{ secrets.USERNAME }}
#          password: ${{ secrets.PASSWORD }}
#          port: ${{ secrets.PORT }}
#          # 스크립트 실행 시 막히면 end
#          script_stop: true
#          script: |
#            whoami
#            pwd
#            ls -al
